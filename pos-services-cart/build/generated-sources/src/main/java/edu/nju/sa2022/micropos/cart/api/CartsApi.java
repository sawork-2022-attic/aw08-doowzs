/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.nju.sa2022.micropos.cart.api;

import edu.nju.sa2022.micropos.cart.dto.CartDto;
import edu.nju.sa2022.micropos.cart.dto.ErrorDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-09T16:41:43.549619+08:00[Asia/Shanghai]")
@Validated
@Api(value = "carts", description = "the carts API")
public interface CartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /carts/items : Add item to cart
     *
     * @param productId ID of product to add (required)
     * @param quantity Amount of product to add (required)
     * @return Updated Cart (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Add item to cart", nickname = "addItem", notes = "", response = CartDto.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated Cart", response = CartDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/items",
        produces = { "application/json" }
    )
    default ResponseEntity<CartDto> addItem(@NotNull @ApiParam(value = "ID of product to add", required = true) @Valid @RequestParam(value = "productId", required = true) String productId,@NotNull @ApiParam(value = "Amount of product to add", required = true) @Valid @RequestParam(value = "quantity", required = true) Integer quantity) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts : Get cart
     *
     * @return A cart (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Get cart", nickname = "getCart", notes = "", response = CartDto.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A cart", response = CartDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts",
        produces = { "application/json" }
    )
    default ResponseEntity<CartDto> getCart() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/items : Remove item from cart
     *
     * @param productId ID of product to add (required)
     * @return Updated Cart (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Remove item from cart", nickname = "removeItem", notes = "", response = CartDto.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated Cart", response = CartDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/items",
        produces = { "application/json" }
    )
    default ResponseEntity<CartDto> removeItem(@ApiParam(value = "ID of product to add", required = true) @PathVariable("productId") String productId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
